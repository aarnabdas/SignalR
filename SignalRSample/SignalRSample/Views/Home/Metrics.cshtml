@{
    ViewBag.Title = "Connection Metrics";
}
<h2>Connection Metrics</h2>
<div class="container">
    <div class="graph"></div>

    <ul id="metrics"></ul>
</div>

@section scripts {
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {

            var limit = 60 * 1,
                duration = 750,
                now = new Date(Date.now() - duration);
            var width = 500,
                height = 200;

            // Reference the auto-generated proxy for the hub.
            var metrics = $.connection.metricsHub;
            // Create a function that the hub can call back to display messages.
            metrics.client.SendCurrentMetrics = function (dateTime, connectionCount) {
                $('#metrics').append('<li>[<strong>' + dateTime
                    + '</strong>]: ' + connectionCount + '</li>');

                now = new Date()
                // Add new values
                for (var name in groups) {
                    var group = groups[name]
                    //group.data.push(group.value) // Real values arrive at irregular intervals
                    group.data.push(connectionCount)
                    group.path.attr('d', line)
                }
                // Shift domain
                x.domain([now - (limit - 2) * duration, now - duration])
                // Slide x-axis left
                axis.transition()
                    .duration(duration)
                    .ease('linear')
                    .call(x.axis)
                // Slide paths left
                paths.attr('transform', null)
                    .transition()
                    .duration(duration)
                    .ease('linear')
                    .attr('transform', 'translate(' + x(now - (limit - 1) * duration) + ')')
                    .each('end', tick)
                // Remove oldest data point from each group
                for (var name in groups) {
                    var group = groups[name]
                    group.data.shift()
                }
            };

            // Start the connection.
            $.connection.hub.start().done(function () {

            });

            var groups = {
                connections: {
                    value: 0,
                    color: 'orange',
                    data: d3.range(limit).map(function () {
                        return 0
                    })
                }
            };
            var x = d3.time.scale()
                .domain([now - (limit - 2), now - duration])
                .range([0, width]);
            var y = d3.scale.linear()
                .domain([0, 100])
                .range([height, 0]);
            var line = d3.svg.line()
                .interpolate('basis')
                .x(function (d, i) {
                    return x(now - (limit - 1 - i) * duration)
                })
                .y(function (d) {
                    return y(d)
                });
            var svg = d3.select('.graph').append('svg')
                .attr('class', 'chart')
                .attr('width', width)
                .attr('height', height + 50);
            var axis = svg.append('g')
                .attr('class', 'x axis')
                .attr('transform', 'translate(0,' + height + ')')
                .call(x.axis = d3.svg.axis().scale(x).orient('bottom'))
            var paths = svg.append('g');

            for (var name in groups) {
                var group = groups[name]
                group.path = paths.append('path')
                    .data([group.data])
                    .attr('class', name + ' group')
                    .style('stroke', group.color)
            }
        });
    </script>
}